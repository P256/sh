server {
	# 监听端口
    listen       80;
	
	# 域名可以有多个,用空格隔开
    server_name  localhost;
	
	# 根目录
	root   /data/web/;

	# 入口文件
	index index.html index.htm index.php;
	
	# 虚拟主机的访问日志
    #access_log /data/log/web/local.access.log main;
	
	# 404页面
    error_page 404 /404.html;
	
    # 服务器错误跳转静态页面 /50x.html
    error_page   500 502 503 504  /50x.html;
	
	# 统一定义500错误
    location = /50x.html {
        root   html;
    }
	
	# 查看Nginx状态
	location /nginx {
		stub_status on;
		access_log on;
		#auth_basic "status";
		#auth_basic_user_file conf/htpasswd;
		#htpasswd文件的内容可以用apache提供的htpasswd工具来产生.
	}
	
	# 查看php-fpm状态
	location /fpm {
        include fastcgi_params;
        fastcgi_pass 127.0.0.1:9000;
        fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;
    }
	
	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	location ~ \.php$ {
	    root           /data/web/;
	    fastcgi_pass   127.0.0.1:9000;
	    fastcgi_index  index.php;
	    fastcgi_param  SCRIPT_FILENAME  /data/web/$fastcgi_script_name;
	    include        fastcgi_params;
	}
	
    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}
	
    # Apache根目录重写文件
    #location ~ /\.ht {
    #    deny  all;
    #}
	
	# 图片缓存时间
	#location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ {
	#	expires 10d;
	#}
	
	# JS和CSS缓存时间
	#location ~ .*\.(js|css)?$ {
	#	expires 1h;
	#}
	
	# 所有jsp的页面均交由tomcat或resin处理
	#location ~ .(jsp|jspx|do)?$ {
	#	proxy_set_header Host $host;
	#	proxy_set_header X-Real-IP $remote_addr;
	#	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	#	proxy_pass http://127.0.0.1:8080;
	#}
	
	# 对 "/" 启用反向代理
    #location / {
        #root   /data/web/;
        #index  index.html index.htm index.php;
		#proxy_pass http://127.0.0.1:88;
		#proxy_redirect off;
		#proxy_set_header X-Real-IP $remote_addr;
		# 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
		#proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		# 以下是一些反向代理的配置,可选.
		#proxy_set_header Host $host;
		# 允许客户端请求的最大单文件字节数
		#client_max_body_size 10m;
		# 缓冲区代理缓冲用户端请求的最大字节数,
		#client_body_buffer_size 128k;
		# nginx跟后端服务器连接超时时间(代理连接超时)
		#proxy_connect_timeout 90;
		# 后端服务器数据回传时间(代理发送超时)
		#proxy_send_timeout 90;
		# 连接成功后,后端服务器响应时间(代理接收超时)
		#proxy_read_timeout 90;
		# 设置代理服务器（nginx）保存用户头信息的缓冲区大小
		#proxy_buffer_size 4k;
		#proxy_buffers缓冲区,网页平均在32k以下的设置
		#proxy_buffers 4 32k;
		# 高负荷下缓冲大小（proxy_buffers*2）
		#proxy_busy_buffers_size 64k;
		#proxy_temp_file_write_size 64k;
		# 设定缓存文件夹大小,大于这个值,将从upstream服务器传
    #}
}